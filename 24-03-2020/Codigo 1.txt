#include <stdio.h>
#include "omp.h"
#include <sys/time.h>

#define iterations 1e09
#define THREADS 4
#define intentos 10 
#define PAD 8
// Funcion a paralelizar
static void calculatePi(int ID, double result[PAD]){
	int i = (iterations/THREADS) * ID, end = (iterations/THREADS) * (ID + 1);
	
	do{
	
		if((i & 1) == 0){
			(*result) = (*result) + (long double)(4.0/((i << 1) | 1)); // (long double)(4.0/((2 * i) + 1));
		}else {
			(*result) = (*result) - (long double)(4.0/((i << 1) | 1)); // (long double)(4.0/((2 * i) + 1));
		}
		i++;
		
	}while(i < end);

}  

int main(){
    struct timeval start, stop, diff;
    gettimeofday(&start, NULL);
    double results[THREADS][PAD];
    for(int i = 0; i < THREADS; i++) results[i][0] = 0;
    #pragma omp parallel num_threads(THREADS)// Inicio de region paralela
    {
        int ID = omp_get_thread_num();
        //printf("Running %d thread.\n", ID);
        calculatePi(ID, results[ID]);
        //printf("results[%d] = %.15f\n", ID, results[ID]);

    }

    double final = 0;
    for(int i = 0; i < THREADS; i++) final += results[i][0];

    gettimeofday(&stop, NULL);

    timersub(&stop, &start, &diff);
    printf("Time: %ld.%06ld\n", (long int) diff.tv_sec, (long int) diff.tv_usec);
    printf("PI: %.15f. \n", final);
    

    return 0;

}